#include <bits/stdc++.h>
#define taskname "C"
using namespace std;

void Input() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    if (fopen(taskname".inp", "r")) {
        freopen(taskname".inp", "r", stdin);
        freopen(taskname".out", "w", stdout);
    }
}

void Solve() {
    int n, m; cin >> n >> m;
    vector<vector<int>> adj(n + 1);
    vector<vector<int>> G(n + 1, vector<int>(n + 1));
    for (int i = 1; i <= m; i++) {
        int u, v; cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
        G[u][v] = G[v][u] = 1;
    }

    auto shortestCycle = [&]() {
        int ans = INT_MAX;

        for (int i = 1; i <= n; i++) {
            vector<int> dist(n + 1, 1e9), par(n + 1, -1);
            dist[i] = 0;

            queue<int> q;
            q.push(i);
            while (!q.empty()) {
                int u = q.front(); q.pop();
                for (int v: adj[u]) {
                    if (dist[v] == 1e9) {
                        dist[v] = dist[u] + 1;
                        par[v] = u;
                        q.push(v);
                    }
                    else if (par[u] != v && par[v] != u) {
                        ans = min(ans, dist[u] + dist[v] + 1);
                    }
                }
            }
        }

        return ans;
    };

    int length = shortestCycle();

    vector<bool> visited(n + 1, false);
    function<void(int, int, int, int &)> dfs = [&](int u, int len, int s, int &cnt) {
        visited[u] = true;
        if (len == 0) {
            visited[u] = false;
            if (G[u][s]) cnt++;
            return ;
        }

        for (int v: adj[u]) {
            if (visited[v]) continue;
            dfs(v, len - 1, s, cnt); 
        }

        visited[u] = false;
    };

    int ans = 0;
    for (int i = 1; i <= n; i++) {
        dfs(i, length - 1, i, ans);
        visited[i] = true;
    }

    cout << ans / 2;
}

int main(){
    Input();
    Solve();
    return 0;
}
